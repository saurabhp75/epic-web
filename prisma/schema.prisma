// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Following command gives sql to replicate the db
// sqlite3 prisma/data.db .dump > data.sql
// npx prisma migrate deploy ; creates a single migration file
// npx prisma migrate dev ;  run this before deploy command
// Widen then narrow approach:
// Widen app to consume A or B
// Widen db to provide A and B and the app to write to both A and B
// Narrow app to consume B and only write to B
// Narrow db to provide B
// https://www.notion.so/03-Data-Migrations-Data-Modeling-Deep-Dive-a7b8f261357840cb8c9177e2b1397961

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image UserImage?
  notes Note[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Here, one to many relationship (owner) is defined and known by the 
  // Note and not User User is not aware of this realtionship
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String // Absense of "@unique" makes the relationship one to many 
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique // "@unique" makes the relationship one to one 
}